name: CI
on:
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: get and checkout repo
        uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
      - name: docker compose
        run: |
          docker compose -f docker-compose.yml up --build -d
      - name: wait for things to start
        run: sleep 10
      - name: test build
        working-directory: web-app
        run: |
          pip install -r requirements.txt
          pip install pytest
          python -m pytest

  push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      
      # Build and push mongodb image
      - name: Build mongodb image
        run: docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/sandwich-mongodb:${GITHUB_SHA::7} ./mongodb
      
      - name: Push mongodb image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/sandwich-mongodb:${GITHUB_SHA::7}
      
      # Build and push web-app image
      - name: Build web-app image
        run: docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/sandwich-web-app:${GITHUB_SHA::7} ./web-app
      
      - name: Push web-app image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/sandwich-web-app:${GITHUB_SHA::7}
  
  deploy:
    runs-on: ubuntu-latest
    needs: push_to_docker_hub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      
      - name: Copy deployment files to Digital Ocean
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/${{ secrets.USERNAME }}/app/"

      - name: Deploy to Digital Ocean droplet via password
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: GITHUB_SHA,SECRETS_DOCKER_USERNAME
          script: |
            cd /home/${{ secrets.USERNAME }}/app/
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull the latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/sandwich-mongodb:${GITHUB_SHA::7}
            docker pull ${{ secrets.DOCKER_USERNAME }}/sandwich-web-app:${GITHUB_SHA::7}
            
            # Create a modified docker-compose.yml that uses the Docker Hub images
            cat > docker-compose.prod.yml << EOL
            services:
              web-app:
                image: ${{ secrets.DOCKER_USERNAME }}/sandwich-web-app:${GITHUB_SHA::7}
                container_name: sandwich-tracker-web
                ports:
                  - "5003:5003"
                environment:
                  - MONGO_URI=mongodb://mongodb:27017
                  - MONGO_DB=sandwich_db
                  - FLASK_ENV=production
                depends_on:
                  - mongodb
                restart: unless-stopped
                networks:
                  - app-network

              mongodb:
                image: ${{ secrets.DOCKER_USERNAME }}/sandwich-mongodb:${GITHUB_SHA::7}
                container_name: sandwich-tracker-mongodb
                volumes:
                  - mongo-data:/data/db
                ports:
                  - "27017:27017"
                environment:
                  - MONGO_INITDB_DATABASE=sandwich_db
                restart: unless-stopped
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge

            volumes:
              mongo-data:
                driver: local
            EOL
            
            # Start the containers using the production compose file
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
            
            # Clean up unused images
            docker image prune -f